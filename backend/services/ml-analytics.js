const natural = require('natural');
const tf = require('@tensorflow/tfjs-node');
const cron = require('node-cron');

/**
 * Servi√ßo de Machine Learning e Analytics
 * ConnectF√© - Conectando F√© e Tecnologia
 */
class MLAnalyticsService {
    constructor() {
        this.tokenizer = new natural.WordTokenizer();
        this.classifier = new natural.BayesClassifier();
        this.analyticsData = new Map();
        this.mlModels = new Map();
        
        this.initializeML();
        this.scheduleAnalytics();
    }

    /**
     * Inicializa os modelos de ML e treina o classificador
     */
    async initializeML() {
        console.log('ü§ñ Inicializando Machine Learning...');
        
        try {
            // Treinar classificador com dados religiosos
            await this.trainReligiousClassifier();
            
            // Inicializar modelo de an√°lise de sentimento
            await this.initializeSentimentAnalysis();
            
            // Inicializar modelo de predi√ß√£o de engajamento
            await this.initializeEngagementPrediction();
            
            console.log('‚úÖ Machine Learning inicializado com sucesso');
        } catch (error) {
            console.error('‚ùå Erro ao inicializar ML:', error.message);
        }
    }

    /**
     * Treina o classificador para categorias religiosas
     */
    async trainReligiousClassifier() {
        // Categorias religiosas com exemplos de treinamento
        const trainingData = {
            'testemunho': [
                'hoje tive uma experi√™ncia incr√≠vel na igreja',
                'deus me aben√ßoou de uma forma especial',
                'testemunho de cura e milagre',
                'gra√ßas a deus pela ben√ß√£o recebida',
                'deus transformou minha vida completamente'
            ],
            'oracao': [
                'preciso de ora√ß√£o para minha fam√≠lia',
                'orem por mim neste momento dif√≠cil',
                'pedido de ora√ß√£o para sa√∫de',
                'intercess√£o pelos necessitados',
                'ora√ß√£o de agradecimento'
            ],
            'estudo_biblico': [
                'estudando o livro de jo√£o',
                'reflex√£o sobre a palavra de deus',
                'estudo sobre f√© e obras',
                'meditando no salmo 23',
                'ensinamento sobre amor ao pr√≥ximo'
            ],
            'evento_igreja': [
                'culto de domingo na igreja',
                'encontro de jovens este fim de semana',
                'confer√™ncia de louvor e adora√ß√£o',
                'retiro espiritual para casais',
                'celebra√ß√£o de anivers√°rio da igreja'
            ],
            'reflexao_espiritual': [
                'reflex√£o sobre gratid√£o',
                'pensamento sobre perd√£o',
                'medita√ß√£o sobre esperan√ßa',
                'reflex√£o sobre humildade',
                'pensamento sobre f√©'
            ],
            'louvor_adoracao': [
                'louvando ao senhor com m√∫sica',
                'adora√ß√£o em esp√≠rito e verdade',
                'can√ß√£o de gratid√£o ao pai',
                'hino de louvor e exalta√ß√£o',
                'm√∫sica para glorificar a deus'
            ]
        };

        // Treinar o classificador
        Object.entries(trainingData).forEach(([category, examples]) => {
            examples.forEach(example => {
                this.classifier.addDocument(example.toLowerCase(), category);
            });
        });

        this.classifier.train();
        console.log('üìö Classificador religioso treinado');
    }

    /**
     * Inicializa an√°lise de sentimento
     */
    async initializeSentimentAnalysis() {
        try {
            // Dados de treinamento para an√°lise de sentimento
            const positiveWords = [
                'b√™n√ß√£o', 'alegria', 'paz', 'amor', 'gratid√£o', 'esperan√ßa',
                'f√©', 'milagre', 'cura', 'transforma√ß√£o', 'vit√≥ria', 'conquista'
            ];

            const negativeWords = [
                'tristeza', 'dor', 'sofrimento', 'ang√∫stia', 'medo', 'preocupa√ß√£o',
                'desespero', 'solid√£o', 'fracasso', 'derrota', 'tenta√ß√£o', 'pecado'
            ];

            const neutralWords = [
                'igreja', 'deus', 'jesus', 'esp√≠rito', 'palavra', 'ora√ß√£o',
                'culto', 'encontro', 'estudo', 'reflex√£o', 'medita√ß√£o'
            ];

            this.sentimentData = {
                positive: new Set(positiveWords),
                negative: new Set(negativeWords),
                neutral: new Set(neutralWords)
            };

            console.log('üòä An√°lise de sentimento inicializada');
        } catch (error) {
            console.error('‚ùå Erro ao inicializar an√°lise de sentimento:', error.message);
        }
    }

    /**
     * Inicializa predi√ß√£o de engajamento
     */
    async initializeEngagementPrediction() {
        try {
            // Modelo simples de predi√ß√£o baseado em caracter√≠sticas do conte√∫do
            this.engagementModel = {
                factors: {
                    length: { weight: 0.2, optimal: 100 },
                    hashtags: { weight: 0.15, optimal: 3 },
                    mentions: { weight: 0.1, optimal: 2 },
                    timeOfDay: { weight: 0.25, optimal: 19 }, // 19h
                    dayOfWeek: { weight: 0.2, optimal: 0 }, // Domingo
                    category: { weight: 0.1, optimal: 'testemunho' }
                }
            };

            console.log('üìä Modelo de predi√ß√£o de engajamento inicializado');
        } catch (error) {
            console.error('‚ùå Erro ao inicializar modelo de engajamento:', error.message);
        }
    }

    /**
     * Categoriza texto automaticamente
     */
    async categorizeText(text) {
        try {
            const cleanText = text.toLowerCase().trim();
            
            if (!cleanText) {
                return {
                    success: false,
                    error: 'Texto vazio'
                };
            }

            // Classifica√ß√£o principal
            const category = this.classifier.classify(cleanText);
            
            // An√°lise de sentimento
            const sentiment = this.analyzeSentiment(cleanText);
            
            // Score de confian√ßa baseado na similaridade
            const confidence = this.calculateConfidence(cleanText, category);
            
            // Raz√µes para a categoriza√ß√£o
            const reasons = this.generateCategorizationReasons(cleanText, category);
            
            // Tags sugeridas
            const tags = this.suggestTags(cleanText, category);
            
            return {
                success: true,
                category,
                confidence: Math.round(confidence * 100),
                sentiment,
                reasons,
                tags,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('‚ùå Erro na categoriza√ß√£o:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Analisa o sentimento do texto
     */
    analyzeSentiment(text) {
        const words = this.tokenizer.tokenize(text.toLowerCase());
        let positiveScore = 0;
        let negativeScore = 0;
        let neutralScore = 0;

        words.forEach(word => {
            if (this.sentimentData.positive.has(word)) {
                positiveScore++;
            } else if (this.sentimentData.negative.has(word)) {
                negativeScore++;
            } else if (this.sentimentData.neutral.has(word)) {
                neutralScore++;
            }
        });

        const total = words.length;
        const positiveRatio = positiveScore / total;
        const negativeRatio = negativeScore / total;

        if (positiveRatio > negativeRatio && positiveRatio > 0.1) {
            return { type: 'positive', score: positiveRatio, confidence: 'high' };
        } else if (negativeRatio > positiveRatio && negativeRatio > 0.1) {
            return { type: 'negative', score: negativeRatio, confidence: 'high' };
        } else {
            return { type: 'neutral', score: neutralScore / total, confidence: 'medium' };
        }
    }

    /**
     * Calcula score de confian√ßa para categoriza√ß√£o
     */
    calculateConfidence(text, category) {
        const words = this.tokenizer.tokenize(text.toLowerCase());
        const categoryWords = this.getCategoryKeywords(category);
        
        let matches = 0;
        words.forEach(word => {
            if (categoryWords.includes(word)) {
                matches++;
            }
        });

        const confidence = matches / words.length;
        return Math.min(confidence * 2, 1); // Normalizar para 0-1
    }

    /**
     * Gera raz√µes para a categoriza√ß√£o
     */
    generateCategorizationReasons(text, category) {
        const reasons = [];
        const words = this.tokenizer.tokenize(text.toLowerCase());
        const categoryWords = this.getCategoryKeywords(category);

        // Raz√µes baseadas em palavras-chave
        const foundKeywords = words.filter(word => categoryWords.includes(word));
        if (foundKeywords.length > 0) {
            reasons.push(`Cont√©m palavras relacionadas a ${category}: ${foundKeywords.join(', ')}`);
        }

        // Raz√µes baseadas no contexto
        switch (category) {
            case 'testemunho':
                if (text.includes('experi√™ncia') || text.includes('aconteceu')) {
                    reasons.push('Relata uma experi√™ncia pessoal');
                }
                break;
            case 'oracao':
                if (text.includes('preciso') || text.includes('orem') || text.includes('pedido')) {
                    reasons.push('Solicita ora√ß√£o ou intercess√£o');
                }
                break;
            case 'estudo_biblico':
                if (text.includes('estudando') || text.includes('reflex√£o') || text.includes('palavra')) {
                    reasons.push('Foca no estudo e reflex√£o b√≠blica');
                }
                break;
        }

        return reasons;
    }

    /**
     * Sugere tags baseadas no conte√∫do
     */
    suggestTags(text, category) {
        const tags = [category];
        const words = this.tokenizer.tokenize(text.toLowerCase());
        
        // Tags baseadas em palavras-chave espec√≠ficas
        const keywordTags = {
            'deus': 'deus',
            'jesus': 'jesus',
            'igreja': 'igreja',
            'f√©': 'f√©',
            'ora√ß√£o': 'ora√ß√£o',
            'b√™n√ß√£o': 'b√™n√ß√£o',
            'gratid√£o': 'gratid√£o',
            'esperan√ßa': 'esperan√ßa',
            'amor': 'amor',
            'paz': 'paz'
        };

        words.forEach(word => {
            if (keywordTags[word] && !tags.includes(keywordTags[word])) {
                tags.push(keywordTags[word]);
            }
        });

        return tags.slice(0, 5); // M√°ximo 5 tags
    }

    /**
     * Obt√©m palavras-chave para uma categoria
     */
    getCategoryKeywords(category) {
        const keywords = {
            'testemunho': ['experi√™ncia', 'aconteceu', 'testemunho', 'milagre', 'cura', 'transforma√ß√£o'],
            'oracao': ['preciso', 'orem', 'pedido', 'ora√ß√£o', 'intercess√£o', 's√∫plica'],
            'estudo_biblico': ['estudando', 'reflex√£o', 'palavra', 'b√≠blia', 'ensinamento', 'medita√ß√£o'],
            'evento_igreja': ['culto', 'encontro', 'confer√™ncia', 'retiro', 'celebra√ß√£o', 'igreja'],
            'reflexao_espiritual': ['reflex√£o', 'pensamento', 'medita√ß√£o', 'gratid√£o', 'perd√£o', 'humildade'],
            'louvor_adoracao': ['louvor', 'adora√ß√£o', 'm√∫sica', 'can√ß√£o', 'hino', 'glorificar']
        };

        return keywords[category] || [];
    }

    /**
     * Prediz engajamento de um post
     */
    async predictEngagement(content) {
        try {
            const factors = this.engagementModel.factors;
            let totalScore = 0;
            const analysis = {};

            // An√°lise de comprimento
            const length = content.text?.length || 0;
            const lengthScore = this.calculateFactorScore(length, factors.length.optimal, 200);
            analysis.length = { value: length, score: lengthScore, weight: factors.length.weight };
            totalScore += lengthScore * factors.length.weight;

            // An√°lise de hashtags
            const hashtags = (content.text?.match(/#\w+/g) || []).length;
            const hashtagScore = this.calculateFactorScore(hashtags, factors.hashtags.optimal, 10);
            analysis.hashtags = { value: hashtags, score: hashtagScore, weight: factors.hashtags.weight };
            totalScore += hashtagScore * factors.hashtags.weight;

            // An√°lise de men√ß√µes
            const mentions = (content.text?.match(/@\w+/g) || []).length;
            const mentionScore = this.calculateFactorScore(mentions, factors.mentions.optimal, 5);
            analysis.mentions = { value: mentions, score: mentionScore, weight: factors.mentions.weight };
            totalScore += mentionScore * factors.mentions.weight;

            // An√°lise de hor√°rio
            const hour = new Date().getHours();
            const timeScore = this.calculateTimeScore(hour, factors.timeOfDay.optimal);
            analysis.timeOfDay = { value: hour, score: timeScore, weight: factors.timeOfDay.weight };
            totalScore += timeScore * factors.timeOfDay.weight;

            // An√°lise de dia da semana
            const dayOfWeek = new Date().getDay(); // 0 = Domingo
            const dayScore = this.calculateDayScore(dayOfWeek, factors.dayOfWeek.optimal);
            analysis.dayOfWeek = { value: dayOfWeek, score: dayScore, weight: factors.dayOfWeek.weight };
            totalScore += dayScore * factors.dayOfWeek.weight;

            // An√°lise de categoria
            const category = content.category || 'unknown';
            const categoryScore = this.calculateCategoryScore(category, factors.category.optimal);
            analysis.category = { value: category, score: categoryScore, weight: factors.category.weight };
            totalScore += categoryScore * factors.category.weight;

            // Normalizar score para 0-100
            const normalizedScore = Math.round(totalScore * 100);
            
            // Determinar n√≠vel de engajamento
            let level = 'low';
            if (normalizedScore >= 70) level = 'high';
            else if (normalizedScore >= 40) level = 'medium';

            return {
                success: true,
                predictedEngagement: normalizedScore,
                level,
                analysis,
                recommendations: this.generateEngagementRecommendations(analysis),
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('‚ùå Erro na predi√ß√£o de engajamento:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Calcula score para um fator espec√≠fico
     */
    calculateFactorScore(value, optimal, max) {
        const distance = Math.abs(value - optimal);
        const maxDistance = max / 2;
        return Math.max(0, 1 - (distance / maxDistance));
    }

    /**
     * Calcula score para hor√°rio do dia
     */
    calculateTimeScore(hour, optimal) {
        const distance = Math.min(Math.abs(hour - optimal), 24 - Math.abs(hour - optimal));
        return Math.max(0, 1 - (distance / 6)); // 6 horas de toler√¢ncia
    }

    /**
     * Calcula score para dia da semana
     */
    calculateDayScore(day, optimal) {
        const distance = Math.abs(day - optimal);
        return distance === 0 ? 1 : Math.max(0, 1 - (distance / 3.5));
    }

    /**
     * Calcula score para categoria
     */
    calculateCategoryScore(category, optimal) {
        return category === optimal ? 1 : 0.5;
    }

    /**
     * Gera recomenda√ß√µes para melhorar engajamento
     */
    generateEngagementRecommendations(analysis) {
        const recommendations = [];

        if (analysis.length.score < 0.7) {
            recommendations.push('Considere ajustar o comprimento do texto para melhor engajamento');
        }

        if (analysis.hashtags.score < 0.7) {
            recommendations.push('Adicione hashtags relevantes para aumentar a descoberta');
        }

        if (analysis.timeOfDay.score < 0.7) {
            recommendations.push('Programe o post para hor√°rios de maior engajamento (19h-21h)');
        }

        if (analysis.dayOfWeek.score < 0.7) {
            recommendations.push('Domingos e quartas-feiras t√™m maior engajamento');
        }

        if (recommendations.length === 0) {
            recommendations.push('Excelente! Seu conte√∫do est√° otimizado para engajamento');
        }

        return recommendations;
    }

    /**
     * Analisa padr√µes de comportamento do usu√°rio
     */
    async analyzeUserBehavior(userId, timeRange = '30d') {
        try {
            // Em produ√ß√£o, buscar dados reais do banco
            const mockData = this.generateMockUserData(userId, timeRange);
            
            const analysis = {
                userId,
                timeRange,
                postingPatterns: this.analyzePostingPatterns(mockData.posts),
                engagementPatterns: this.analyzeEngagementPatterns(mockData.engagement),
                contentPreferences: this.analyzeContentPreferences(mockData.posts),
                optimalTiming: this.findOptimalTiming(mockData.posts),
                recommendations: []
            };

            // Gerar recomenda√ß√µes baseadas na an√°lise
            analysis.recommendations = this.generateUserRecommendations(analysis);

            return {
                success: true,
                analysis,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('‚ùå Erro na an√°lise de comportamento:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Analisa padr√µes de postagem
     */
    analyzePostingPatterns(posts) {
        const patterns = {
            frequency: posts.length,
            averageLength: posts.reduce((sum, post) => sum + post.text.length, 0) / posts.length,
            categories: {},
            timeDistribution: new Array(24).fill(0),
            dayDistribution: new Array(7).fill(0)
        };

        posts.forEach(post => {
            // Contar categorias
            patterns.categories[post.category] = (patterns.categories[post.category] || 0) + 1;
            
            // Distribui√ß√£o por hora
            const hour = new Date(post.timestamp).getHours();
            patterns.timeDistribution[hour]++;
            
            // Distribui√ß√£o por dia
            const day = new Date(post.timestamp).getDay();
            patterns.dayDistribution[day]++;
        });

        return patterns;
    }

    /**
     * Analisa padr√µes de engajamento
     */
    analyzeEngagementPatterns(engagement) {
        return {
            averageLikes: engagement.reduce((sum, e) => sum + e.likes, 0) / engagement.length,
            averageComments: engagement.reduce((sum, e) => sum + e.comments, 0) / engagement.length,
            averageShares: engagement.reduce((sum, e) => sum + e.shares, 0) / engagement.length,
            totalEngagement: engagement.reduce((sum, e) => sum + e.likes + e.comments + e.shares, 0)
        };
    }

    /**
     * Analisa prefer√™ncias de conte√∫do
     */
    analyzeContentPreferences(posts) {
        const preferences = {};
        
        posts.forEach(post => {
            if (!preferences[post.category]) {
                preferences[post.category] = { count: 0, avgEngagement: 0, posts: [] };
            }
            
            preferences[post.category].count++;
            preferences[post.category].posts.push(post);
        });

        // Calcular engajamento m√©dio por categoria
        Object.values(preferences).forEach(pref => {
            const totalEngagement = pref.posts.reduce((sum, post) => 
                sum + (post.likes || 0) + (post.comments || 0) + (post.shares || 0), 0);
            pref.avgEngagement = totalEngagement / pref.posts.length;
        });

        return preferences;
    }

    /**
     * Encontra hor√°rio ideal para postagem
     */
    findOptimalTiming(posts) {
        const timeEngagement = new Array(24).fill(0).map(() => ({ count: 0, totalEngagement: 0 }));
        
        posts.forEach(post => {
            const hour = new Date(post.timestamp).getHours();
            const engagement = (post.likes || 0) + (post.comments || 0) + (post.shares || 0);
            
            timeEngagement[hour].count++;
            timeEngagement[hour].totalEngagement += engagement;
        });

        // Encontrar hora com maior engajamento m√©dio
        let bestHour = 0;
        let bestAvgEngagement = 0;

        timeEngagement.forEach((data, hour) => {
            if (data.count > 0) {
                const avgEngagement = data.totalEngagement / data.count;
                if (avgEngagement > bestAvgEngagement) {
                    bestAvgEngagement = avgEngagement;
                    bestHour = hour;
                }
            }
        });

        return {
            bestHour,
            bestAvgEngagement: Math.round(bestAvgEngagement * 100) / 100,
            timeEngagement
        };
    }

    /**
     * Gera recomenda√ß√µes personalizadas para o usu√°rio
     */
    generateUserRecommendations(analysis) {
        const recommendations = [];

        // Recomenda√ß√µes baseadas em padr√µes de postagem
        if (analysis.postingPatterns.frequency < 5) {
            recommendations.push('Considere postar com mais frequ√™ncia para manter engajamento');
        }

        // Recomenda√ß√µes baseadas em hor√°rio
        if (analysis.optimalTiming.bestHour !== 19) {
            recommendations.push(`Seu hor√°rio ideal de postagem √© √†s ${analysis.optimalTiming.bestHour}h`);
        }

        // Recomenda√ß√µes baseadas em categorias
        const topCategory = Object.entries(analysis.contentPreferences)
            .sort(([,a], [,b]) => b.avgEngagement - a.avgEngagement)[0];
        
        if (topCategory) {
            recommendations.push(`Posts sobre "${topCategory[0]}" t√™m maior engajamento`);
        }

        return recommendations;
    }

    /**
     * Gera dados mock para desenvolvimento
     */
    generateMockUserData(userId, timeRange) {
        const now = new Date();
        const daysAgo = timeRange === '30d' ? 30 : timeRange === '7d' ? 7 : 1;
        
        const posts = [];
        const engagement = [];

        for (let i = 0; i < Math.floor(Math.random() * 20) + 5; i++) {
            const postDate = new Date(now.getTime() - Math.random() * daysAgo * 24 * 60 * 60 * 1000);
            
            posts.push({
                id: `post_${i}`,
                text: `Post de exemplo ${i}`,
                category: ['testemunho', 'oracao', 'estudo_biblico', 'evento_igreja'][Math.floor(Math.random() * 4)],
                timestamp: postDate.toISOString(),
                likes: Math.floor(Math.random() * 50),
                comments: Math.floor(Math.random() * 10),
                shares: Math.floor(Math.random() * 5)
            });

            engagement.push({
                postId: `post_${i}`,
                likes: posts[i].likes,
                comments: posts[i].comments,
                shares: posts[i].shares
            });
        }

        return { posts, engagement };
    }

    /**
     * Agenda an√°lises autom√°ticas
     */
    scheduleAnalytics() {
        // An√°lise di√°ria √†s 2h da manh√£
        cron.schedule('0 2 * * *', async () => {
            console.log('üìä Executando an√°lise di√°ria autom√°tica...');
            await this.runDailyAnalytics();
        });

        // An√°lise semanal aos domingos √†s 3h
        cron.schedule('0 3 * * 0', async () => {
            console.log('üìä Executando an√°lise semanal autom√°tica...');
            await this.runWeeklyAnalytics();
        });
    }

    /**
     * Executa an√°lise di√°ria autom√°tica
     */
    async runDailyAnalytics() {
        try {
            // Em produ√ß√£o, buscar usu√°rios ativos e executar an√°lises
            console.log('‚úÖ An√°lise di√°ria conclu√≠da');
        } catch (error) {
            console.error('‚ùå Erro na an√°lise di√°ria:', error.message);
        }
    }

    /**
     * Executa an√°lise semanal autom√°tica
     */
    async runWeeklyAnalytics() {
        try {
            // Em produ√ß√£o, gerar relat√≥rios semanais
            console.log('‚úÖ An√°lise semanal conclu√≠da');
        } catch (error) {
            console.error('‚ùå Erro na an√°lise semanal:', error.message);
        }
    }

    /**
     * Obt√©m estat√≠sticas gerais do sistema
     */
    async getSystemStats() {
        try {
            const stats = {
                totalUsers: this.analyticsData.size,
                mlModels: this.mlModels.size,
                lastUpdate: new Date().toISOString(),
                performance: {
                    categorizationAccuracy: 0.87,
                    sentimentAccuracy: 0.82,
                    engagementPredictionAccuracy: 0.79
                }
            };

            return {
                success: true,
                stats,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('‚ùå Erro ao obter estat√≠sticas do sistema:', error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

module.exports = MLAnalyticsService;