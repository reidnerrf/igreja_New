/**
 * Configura√ß√£o de Temas Cat√≥licos
 * ConnectF√© - Sistema de Temas Sazonais Cat√≥licos
 */

const moment = require('moment');

class CatholicThemeConfig {
    constructor() {
        this.themes = {};
        this.seasons = {};
        this.loadCatholicThemes();
    }

    /**
     * Carrega todos os temas cat√≥licos e datas especiais
     */
    loadCatholicThemes() {
        // Temas Sazonais Cat√≥licos
        this.seasons = {
            // Tempo Comum
            ordinary: {
                name: 'Tempo Comum',
                color: '#2E7D32', // Verde
                startDate: null, // Calculado dinamicamente
                endDate: null,
                icon: 'üåø',
                description: 'Per√≠odo de crescimento e desenvolvimento espiritual'
            },

            // Advento
            advent: {
                name: 'Advento',
                color: '#1976D2', // Azul
                startDate: '12-01', // 1¬∫ de dezembro
                endDate: '12-24', // 24 de dezembro
                icon: 'üïØÔ∏è',
                description: 'Prepara√ß√£o para o Natal de Jesus Cristo',
                specialDays: ['12-08', '12-12', '12-25'] // Imaculada Concei√ß√£o, Guadalupe, Natal
            },

            // Natal
            christmas: {
                name: 'Natal',
                color: '#D32F2F', // Vermelho
                startDate: '12-25', // 25 de dezembro
                endDate: '01-06', // 6 de janeiro (Epifania)
                icon: 'üéÑ',
                description: 'Celebra√ß√£o do nascimento de Jesus Cristo',
                specialDays: ['12-25', '01-01', '01-06'] // Natal, Maria M√£e de Deus, Epifania
            },

            // Quaresma
            lent: {
                name: 'Quaresma',
                color: '#7B1FA2', // Roxo
                startDate: null, // Calculado (Quarta-feira de Cinzas)
                endDate: null, // Calculado (Quinta-feira Santa)
                icon: 'üïäÔ∏è',
                description: 'Per√≠odo de penit√™ncia e prepara√ß√£o para a P√°scoa',
                specialDays: ['ash-wednesday', 'palm-sunday', 'holy-thursday', 'good-friday']
            },

            // P√°scoa
            easter: {
                name: 'P√°scoa',
                color: '#FFD700', // Dourado
                startDate: null, // Calculado (Domingo de P√°scoa)
                endDate: null, // Calculado (Pentecostes)
                icon: '‚úùÔ∏è',
                description: 'Celebra√ß√£o da Ressurrei√ß√£o de Jesus Cristo',
                specialDays: ['easter-sunday', 'ascension', 'pentecost']
            },

            // Tempo Pascal
            easterSeason: {
                name: 'Tempo Pascal',
                color: '#FFD700', // Dourado
                startDate: null, // Calculado (Domingo de P√°scoa)
                endDate: null, // Calculado (Pentecostes)
                icon: 'üïäÔ∏è',
                description: 'Celebra√ß√£o da vit√≥ria de Cristo sobre a morte'
            },

            // Pentecostes
            pentecost: {
                name: 'Pentecostes',
                color: '#FF5722', // Laranja
                startDate: null, // Calculado (50 dias ap√≥s P√°scoa)
                endDate: null, // Calculado (Trindade)
                icon: 'üî•',
                description: 'Vinda do Esp√≠rito Santo sobre os ap√≥stolos',
                specialDays: ['pentecost-sunday', 'trinity-sunday', 'corpus-christi']
            }
        };

        // Datas Especiais Cat√≥licas
        this.specialDates = {
            // Janeiro
            '01-01': {
                name: 'Maria M√£e de Deus',
                type: 'solemnity',
                color: '#E91E63', // Rosa
                icon: 'üëë',
                description: 'Solenidade de Maria, M√£e de Deus',
                isHoliday: true
            },
            '01-06': {
                name: 'Epifania do Senhor',
                type: 'solemnity',
                color: '#FFD700', // Dourado
                icon: '‚≠ê',
                description: 'Manifesta√ß√£o de Jesus aos Magos',
                isHoliday: true
            },

            // Fevereiro
            '02-02': {
                name: 'Apresenta√ß√£o do Senhor',
                type: 'feast',
                color: '#FF9800', // Laranja
                icon: 'üïØÔ∏è',
                description: 'Apresenta√ß√£o de Jesus no Templo',
                isHoliday: false
            },
            '02-11': {
                name: 'Nossa Senhora de Lourdes',
                type: 'memorial',
                color: '#2196F3', // Azul
                icon: 'üåπ',
                description: 'Memorial de Nossa Senhora de Lourdes',
                isHoliday: false
            },

            // Mar√ßo
            '03-19': {
                name: 'S√£o Jos√©',
                type: 'solemnity',
                color: '#795548', // Marrom
                icon: 'üî®',
                description: 'Solenidade de S√£o Jos√©, Esposo da Virgem Maria',
                isHoliday: true
            },
            '03-25': {
                name: 'Anuncia√ß√£o do Senhor',
                type: 'solemnity',
                color: '#E91E63', // Rosa
                icon: 'üëº',
                description: 'Anuncia√ß√£o do Anjo Gabriel a Maria',
                isHoliday: true
            },

            // Abril
            '04-25': {
                name: 'S√£o Marcos',
                type: 'feast',
                color: '#4CAF50', // Verde
                icon: 'üìñ',
                description: 'Festa de S√£o Marcos, Evangelista',
                isHoliday: false
            },

            // Maio
            '05-01': {
                name: 'S√£o Jos√© Oper√°rio',
                type: 'memorial',
                color: '#795548', // Marrom
                icon: 'üî®',
                description: 'Memorial de S√£o Jos√© Oper√°rio',
                isHoliday: false
            },
            '05-31': {
                name: 'Visita√ß√£o de Maria',
                type: 'feast',
                color: '#E91E63', // Rosa
                icon: 'ü§ù',
                description: 'Visita√ß√£o de Maria a Santa Isabel',
                isHoliday: false
            },

            // Junho
            '06-24': {
                name: 'Nascimento de S√£o Jo√£o Batista',
                type: 'solemnity',
                color: '#FF9800', // Laranja
                icon: 'üïäÔ∏è',
                description: 'Solenidade do Nascimento de S√£o Jo√£o Batista',
                isHoliday: true
            },
            '06-29': {
                name: 'S√£o Pedro e S√£o Paulo',
                type: 'solemnity',
                color: '#FFD700', // Dourado
                icon: 'üóùÔ∏è',
                description: 'Solenidade dos Ap√≥stolos S√£o Pedro e S√£o Paulo',
                isHoliday: true
            },

            // Julho
            '07-16': {
                name: 'Nossa Senhora do Carmo',
                type: 'memorial',
                color: '#E91E63', // Rosa
                icon: 'üåø',
                description: 'Memorial de Nossa Senhora do Carmo',
                isHoliday: false
            },
            '07-25': {
                name: 'S√£o Tiago',
                type: 'feast',
                color: '#4CAF50', // Verde
                icon: '‚öîÔ∏è',
                description: 'Festa de S√£o Tiago, Ap√≥stolo',
                isHoliday: false
            },

            // Agosto
            '08-15': {
                name: 'Assun√ß√£o de Nossa Senhora',
                type: 'solemnity',
                color: '#E91E63', // Rosa
                icon: 'üëë',
                description: 'Assun√ß√£o de Maria ao C√©u',
                isHoliday: true
            },
            '08-22': {
                name: 'Nossa Senhora Rainha',
                type: 'memorial',
                color: '#E91E63', // Rosa
                icon: 'üëë',
                description: 'Memorial de Nossa Senhora Rainha',
                isHoliday: false
            },

            // Setembro
            '09-08': {
                name: 'Nascimento de Nossa Senhora',
                type: 'feast',
                color: '#E91E63', // Rosa
                icon: 'üë∂',
                description: 'Festa do Nascimento de Nossa Senhora',
                isHoliday: false
            },
            '09-14': {
                name: 'Exalta√ß√£o da Santa Cruz',
                type: 'feast',
                color: '#D32F2F', // Vermelho
                icon: '‚úùÔ∏è',
                description: 'Exalta√ß√£o da Santa Cruz',
                isHoliday: false
            },
            '09-29': {
                name: 'S√£o Miguel, S√£o Gabriel e S√£o Rafael',
                type: 'feast',
                color: '#FFD700', // Dourado
                icon: 'üëº',
                description: 'Festa dos Santos Arcanjos',
                isHoliday: false
            },

            // Outubro
            '10-01': {
                name: 'Santa Teresinha do Menino Jesus',
                type: 'memorial',
                color: '#E91E63', // Rosa
                icon: 'üåπ',
                description: 'Memorial de Santa Teresinha do Menino Jesus',
                isHoliday: false
            },
            '10-02': {
                name: 'Santos Anjos da Guarda',
                type: 'memorial',
                color: '#FFD700', // Dourado
                icon: 'üëº',
                description: 'Memorial dos Santos Anjos da Guarda',
                isHoliday: false
            },
            '10-07': {
                name: 'Nossa Senhora do Ros√°rio',
                type: 'memorial',
                color: '#E91E63', // Rosa
                icon: 'üìø',
                description: 'Memorial de Nossa Senhora do Ros√°rio',
                isHoliday: false
            },

            // Novembro
            '11-01': {
                name: 'Todos os Santos',
                type: 'solemnity',
                color: '#FFD700', // Dourado
                icon: 'üëº',
                description: 'Solenidade de Todos os Santos',
                isHoliday: true
            },
            '11-02': {
                name: 'Finados',
                type: 'commemoration',
                color: '#757575', // Cinza
                icon: 'üïØÔ∏è',
                description: 'Comemora√ß√£o de Todos os Fi√©is Defuntos',
                isHoliday: true
            },
            '11-21': {
                name: 'Apresenta√ß√£o de Nossa Senhora',
                type: 'memorial',
                color: '#E91E63', // Rosa
                icon: 'üëë',
                description: 'Memorial da Apresenta√ß√£o de Nossa Senhora',
                isHoliday: false
            },
            '11-30': {
                name: 'Santo Andr√©',
                type: 'feast',
                color: '#4CAF50', // Verde
                icon: 'üé£',
                description: 'Festa de Santo Andr√©, Ap√≥stolo',
                isHoliday: false
            },

            // Dezembro
            '12-08': {
                name: 'Imaculada Concei√ß√£o',
                type: 'solemnity',
                color: '#E91E63', // Rosa
                icon: 'üëë',
                description: 'Solenidade da Imaculada Concei√ß√£o',
                isHoliday: true
            },
            '12-12': {
                name: 'Nossa Senhora de Guadalupe',
                type: 'feast',
                color: '#E91E63', // Rosa
                icon: 'üåπ',
                description: 'Festa de Nossa Senhora de Guadalupe',
                isHoliday: false
            },
            '12-25': {
                name: 'Natal do Senhor',
                type: 'solemnity',
                color: '#D32F2F', // Vermelho
                icon: 'üéÑ',
                description: 'Solenidade do Natal do Senhor',
                isHoliday: true
            }
        };

        // Datas m√≥veis (calculadas dinamicamente)
        this.movableDates = {
            'ash-wednesday': {
                name: 'Quarta-feira de Cinzas',
                type: 'special',
                color: '#757575', // Cinza
                icon: 'üñ§',
                description: 'In√≠cio da Quaresma',
                calculate: () => this.calculateAshWednesday()
            },
            'palm-sunday': {
                name: 'Domingo de Ramos',
                type: 'special',
                color: '#4CAF50', // Verde
                icon: 'üåø',
                description: 'Entrada triunfal de Jesus em Jerusal√©m',
                calculate: () => this.calculatePalmSunday()
            },
            'holy-thursday': {
                name: 'Quinta-feira Santa',
                type: 'special',
                color: '#7B1FA2', // Roxo
                icon: 'üç∑',
                description: 'Institui√ß√£o da Eucaristia',
                calculate: () => this.calculateHolyThursday()
            },
            'good-friday': {
                name: 'Sexta-feira Santa',
                type: 'special',
                color: '#D32F2F', // Vermelho
                icon: '‚úùÔ∏è',
                description: 'Paix√£o e Morte de Jesus Cristo',
                calculate: () => this.calculateGoodFriday()
            },
            'easter-sunday': {
                name: 'Domingo de P√°scoa',
                type: 'special',
                color: '#FFD700', // Dourado
                icon: '‚úùÔ∏è',
                description: 'Ressurrei√ß√£o de Jesus Cristo',
                calculate: () => this.calculateEasterSunday()
            },
            'ascension': {
                name: 'Ascens√£o do Senhor',
                type: 'special',
                color: '#FFD700', // Dourado
                icon: '‚òÅÔ∏è',
                description: 'Ascens√£o de Jesus ao C√©u',
                calculate: () => this.calculateAscension()
            },
            'pentecost-sunday': {
                name: 'Pentecostes',
                type: 'special',
                color: '#FF5722', // Laranja
                icon: 'üî•',
                description: 'Vinda do Esp√≠rito Santo',
                calculate: () => this.calculatePentecost()
            },
            'trinity-sunday': {
                name: 'Sant√≠ssima Trindade',
                type: 'special',
                color: '#FFD700', // Dourado
                icon: '‚òòÔ∏è',
                description: 'Solenidade da Sant√≠ssima Trindade',
                calculate: () => this.calculateTrinitySunday()
            },
            'corpus-christi': {
                name: 'Corpus Christi',
                type: 'special',
                color: '#FFD700', // Dourado
                icon: 'üç∑',
                description: 'Corpo e Sangue de Cristo',
                calculate: () => this.calculateCorpusChristi()
            }
        };
    }

    /**
     * Calcula a data da Quarta-feira de Cinzas
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato MM-DD
     */
    calculateAshWednesday(year = new Date().getFullYear()) {
        const easter = this.calculateEasterSunday(year);
        const easterDate = moment(easter, 'YYYY-MM-DD');
        const ashWednesday = easterDate.clone().subtract(46, 'days');
        return ashWednesday.format('MM-DD');
    }

    /**
     * Calcula a data do Domingo de Ramos
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato MM-DD
     */
    calculatePalmSunday(year = new Date().getFullYear()) {
        const easter = this.calculateEasterSunday(year);
        const easterDate = moment(easter, 'YYYY-MM-DD');
        const palmSunday = easterDate.clone().subtract(7, 'days');
        return palmSunday.format('MM-DD');
    }

    /**
     * Calcula a data da Quinta-feira Santa
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato MM-DD
     */
    calculateHolyThursday(year = new Date().getFullYear()) {
        const easter = this.calculateEasterSunday(year);
        const easterDate = moment(easter, 'YYYY-MM-DD');
        const holyThursday = easterDate.clone().subtract(3, 'days');
        return holyThursday.format('MM-DD');
    }

    /**
     * Calcula a data da Sexta-feira Santa
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato MM-DD
     */
    calculateGoodFriday(year = new Date().getFullYear()) {
        const easter = this.calculateEasterSunday(year);
        const easterDate = moment(easter, 'YYYY-MM-DD');
        const goodFriday = easterDate.clone().subtract(2, 'days');
        return goodFriday.format('MM-DD');
    }

    /**
     * Calcula a data do Domingo de P√°scoa (Algoritmo de Meeus/Jones/Butcher)
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato YYYY-MM-DD
     */
    calculateEasterSunday(year) {
        const a = year % 19;
        const b = Math.floor(year / 100);
        const c = year % 100;
        const d = Math.floor(b / 4);
        const e = b % 4;
        const f = Math.floor((b + 8) / 25);
        const g = Math.floor((b - f + 1) / 3);
        const h = (19 * a + b - d - g + 15) % 30;
        const i = Math.floor(c / 4);
        const k = c % 4;
        const l = (32 + 2 * e + 2 * i - h - k) % 7;
        const m = Math.floor((a + 11 * h + 22 * l) / 451);
        const month = Math.floor((h + l - 7 * m + 114) / 31);
        const day = ((h + l - 7 * m + 114) % 31) + 1;
        
        return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
    }

    /**
     * Calcula a data da Ascens√£o (40 dias ap√≥s P√°scoa)
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato MM-DD
     */
    calculateAscension(year = new Date().getFullYear()) {
        const easter = this.calculateEasterSunday(year);
        const easterDate = moment(easter, 'YYYY-MM-DD');
        const ascension = easterDate.clone().add(40, 'days');
        return ascension.format('MM-DD');
    }

    /**
     * Calcula a data do Pentecostes (50 dias ap√≥s P√°scoa)
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato MM-DD
     */
    calculatePentecost(year = new Date().getFullYear()) {
        const easter = this.calculateEasterSunday(year);
        const easterDate = moment(easter, 'YYYY-MM-DD');
        const pentecost = easterDate.clone().add(50, 'days');
        return pentecost.format('MM-DD');
    }

    /**
     * Calcula a data da Sant√≠ssima Trindade (domingo ap√≥s Pentecostes)
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato MM-DD
     */
    calculateTrinitySunday(year = new Date().getFullYear()) {
        const pentecost = this.calculatePentecost(year);
        const pentecostDate = moment(pentecost, 'MM-DD');
        const trinitySunday = pentecostDate.clone().add(7, 'days');
        return trinitySunday.format('MM-DD');
    }

    /**
     * Calcula a data do Corpus Christi (quinta-feira ap√≥s Trindade)
     * @param {number} year - Ano para calcular
     * @returns {string} Data no formato MM-DD
     */
    calculateCorpusChristi(year = new Date().getFullYear()) {
        const trinity = this.calculateTrinitySunday(year);
        const trinityDate = moment(trinity, 'MM-DD');
        const corpusChristi = trinityDate.clone().add(4, 'days');
        return corpusChristi.format('MM-DD');
    }

    /**
     * Obt√©m o tema atual baseado na data
     * @param {Date} date - Data para verificar (padr√£o: hoje)
     * @returns {Object} Tema atual
     */
    getCurrentTheme(date = new Date()) {
        const currentDate = moment(date);
        const monthDay = currentDate.format('MM-DD');
        const year = currentDate.year();

        // Verifica datas especiais fixas
        if (this.specialDates[monthDay]) {
            return {
                type: 'special',
                data: this.specialDates[monthDay],
                season: this.getCurrentSeason(date)
            };
        }

        // Verifica datas m√≥veis
        for (const [key, movableDate] of Object.entries(this.movableDates)) {
            const calculatedDate = movableDate.calculate(year);
            if (monthDay === calculatedDate) {
                return {
                    type: 'movable',
                    data: movableDate,
                    season: this.getCurrentSeason(date)
                };
            }
        }

        // Retorna o tema da esta√ß√£o atual
        return {
            type: 'season',
            data: this.getCurrentSeason(date),
            season: this.getCurrentSeason(date)
        };
    }

    /**
     * Obt√©m a esta√ß√£o lit√∫rgica atual
     * @param {Date} date - Data para verificar
     * @returns {Object} Esta√ß√£o atual
     */
    getCurrentSeason(date = new Date()) {
        const currentDate = moment(date);
        const year = currentDate.year();

        // Calcula datas m√≥veis para o ano atual
        const easter = this.calculateEasterSunday(year);
        const easterDate = moment(easter, 'YYYY-MM-DD');
        const ashWednesday = moment(this.calculateAshWednesday(year), 'MM-DD').year(year);
        const pentecost = moment(this.calculatePentecost(year), 'MM-DD').year(year);

        // Verifica Advento (1¬∫ de dezembro a 24 de dezembro)
        if (currentDate.month() === 11 && currentDate.date() <= 24) {
            return this.seasons.advent;
        }

        // Verifica Natal (25 de dezembro a 6 de janeiro)
        if ((currentDate.month() === 11 && currentDate.date() >= 25) ||
            (currentDate.month() === 0 && currentDate.date() <= 6)) {
            return this.seasons.christmas;
        }

        // Verifica Quaresma (Quarta-feira de Cinzas a Quinta-feira Santa)
        if (currentDate.isBetween(ashWednesday, easterDate.clone().subtract(3, 'days'), 'day', '[]')) {
            return this.seasons.lent;
        }

        // Verifica P√°scoa (Domingo de P√°scoa a Pentecostes)
        if (currentDate.isBetween(easterDate, pentecost, 'day', '[]')) {
            return this.seasons.easter;
        }

        // Verifica Pentecostes (Domingo de Pentecostes + 1 semana)
        const trinitySunday = moment(this.calculateTrinitySunday(year), 'MM-DD').year(year);
        if (currentDate.isBetween(pentecost, trinitySunday.clone().add(7, 'days'), 'day', '[]')) {
            return this.seasons.pentecost;
        }

        // Tempo Comum (padr√£o)
        return this.seasons.ordinary;
    }

    /**
     * Obt√©m todas as datas especiais de um m√™s
     * @param {number} month - M√™s (1-12)
     * @param {number} year - Ano
     * @returns {Array} Lista de datas especiais
     */
    getMonthSpecialDates(month, year = new Date().getFullYear()) {
        const specialDates = [];
        const monthStr = month.toString().padStart(2, '0');

        // Adiciona datas fixas do m√™s
        Object.entries(this.specialDates).forEach(([date, data]) => {
            if (date.startsWith(monthStr)) {
                specialDates.push({
                    date: `${year}-${date}`,
                    ...data
                });
            }
        });

        // Adiciona datas m√≥veis do m√™s
        Object.entries(this.movableDates).forEach(([key, data]) => {
            const calculatedDate = data.calculate(year);
            if (calculatedDate.startsWith(monthStr)) {
                specialDates.push({
                    date: `${year}-${calculatedDate}`,
                    ...data
                });
            }
        });

        // Ordena por data
        return specialDates.sort((a, b) => moment(a.date).diff(moment(b.date)));
    }

    /**
     * Obt√©m o calend√°rio lit√∫rgico completo de um ano
     * @param {number} year - Ano
     * @returns {Object} Calend√°rio lit√∫rgico
     */
    getLiturgicalCalendar(year = new Date().getFullYear()) {
        const calendar = {
            year: year,
            seasons: {},
            specialDates: {},
            movableDates: {}
        };

        // Calcula datas m√≥veis
        Object.entries(this.movableDates).forEach(([key, data]) => {
            const calculatedDate = data.calculate(year);
            calendar.movableDates[key] = {
                date: `${year}-${calculatedDate}`,
                ...data
            };
        });

        // Adiciona datas especiais
        Object.entries(this.specialDates).forEach(([date, data]) => {
            calendar.specialDates[date] = {
                date: `${year}-${date}`,
                ...data
            };
        });

        // Calcula esta√ß√µes
        const easter = this.calculateEasterSunday(year);
        const easterDate = moment(easter, 'YYYY-MM-DD');
        
        calendar.seasons = {
            advent: {
                start: `${year}-12-01`,
                end: `${year}-12-24`,
                ...this.seasons.advent
            },
            christmas: {
                start: `${year}-12-25`,
                end: `${year + 1}-01-06`,
                ...this.seasons.christmas
            },
            lent: {
                start: `${year}-${this.calculateAshWednesday(year)}`,
                end: `${year}-${this.calculateHolyThursday(year)}`,
                ...this.seasons.lent
            },
            easter: {
                start: easter,
                end: `${year}-${this.calculatePentecost(year)}`,
                ...this.seasons.easter
            },
            pentecost: {
                start: `${year}-${this.calculatePentecost(year)}`,
                end: `${year}-${this.calculateTrinitySunday(year)}`,
                ...this.seasons.pentecost
            }
        };

        return calendar;
    }

    /**
     * Obt√©m as pr√≥ximas datas especiais
     * @param {number} count - N√∫mero de datas para retornar
     * @returns {Array} Pr√≥ximas datas especiais
     */
    getUpcomingSpecialDates(count = 10) {
        const today = moment();
        const year = today.year();
        const nextYear = year + 1;
        
        let allDates = [];

        // Adiciona datas do ano atual
        Object.entries(this.specialDates).forEach(([date, data]) => {
            const fullDate = moment(`${year}-${date}`);
            if (fullDate.isAfter(today)) {
                allDates.push({
                    date: fullDate.format('YYYY-MM-DD'),
                    ...data
                });
            }
        });

        // Adiciona datas m√≥veis do ano atual
        Object.entries(this.movableDates).forEach(([key, data]) => {
            const calculatedDate = data.calculate(year);
            const fullDate = moment(`${year}-${calculatedDate}`);
            if (fullDate.isAfter(today)) {
                allDates.push({
                    date: fullDate.format('YYYY-MM-DD'),
                    ...data
                });
            }
        });

        // Adiciona datas do pr√≥ximo ano se necess√°rio
        if (allDates.length < count) {
            Object.entries(this.specialDates).forEach(([date, data]) => {
                const fullDate = moment(`${nextYear}-${date}`);
                allDates.push({
                    date: fullDate.format('YYYY-MM-DD'),
                    ...data
                });
            });

            Object.entries(this.movableDates).forEach(([key, data]) => {
                const calculatedDate = data.calculate(nextYear);
                const fullDate = moment(`${nextYear}-${calculatedDate}`);
                allDates.push({
                    date: fullDate.format('YYYY-MM-DD'),
                    ...data
                });
            });
        }

        // Ordena por data e retorna as pr√≥ximas
        return allDates
            .sort((a, b) => moment(a.date).diff(moment(b.date)))
            .slice(0, count);
    }

    /**
     * Obt√©m o tema para uma data espec√≠fica
     * @param {string} date - Data no formato YYYY-MM-DD
     * @returns {Object} Tema da data
     */
    getThemeForDate(date) {
        const momentDate = moment(date);
        return this.getCurrentTheme(momentDate.toDate());
    }

    /**
     * Verifica se uma data √© feriado
     * @param {string} date - Data no formato YYYY-MM-DD
     * @returns {boolean} √â feriado
     */
    isHoliday(date) {
        const theme = this.getThemeForDate(date);
        
        if (theme.type === 'special' || theme.type === 'movable') {
            return theme.data.isHoliday || false;
        }
        
        return false;
    }

    /**
     * Obt√©m estat√≠sticas dos temas
     * @returns {Object} Estat√≠sticas
     */
    getThemeStats() {
        const totalSpecialDates = Object.keys(this.specialDates).length;
        const totalMovableDates = Object.keys(this.movableDates).length;
        const totalSeasons = Object.keys(this.seasons).length;
        
        return {
            totalSpecialDates,
            totalMovableDates,
            totalSeasons,
            totalThemes: totalSpecialDates + totalMovableDates + totalSeasons
        };
    }
}

// Inst√¢ncia singleton
const catholicThemeConfig = new CatholicThemeConfig();

module.exports = catholicThemeConfig;