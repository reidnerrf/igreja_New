/**
 * Teste do Sistema de Configura√ß√£o
 * ConnectF√© - Verifica√ß√£o de Configura√ß√µes
 */

const path = require('path');
const fs = require('fs');

// Carrega as configura√ß√µes
console.log('üîß Carregando sistema de configura√ß√£o...\n');

try {
    const config = require('./config');
    const socialConfig = require('./config/social-apis');
    const mlConfig = require('./config/ml-analytics');
    const chatConfig = require('./config/live-chat');

    console.log('‚úÖ Configura√ß√µes carregadas com sucesso!\n');

    // Teste da configura√ß√£o principal
    console.log('üìã === CONFIGURA√á√ÉO PRINCIPAL ===');
    console.log(`Nome do Sistema: ${config.getSectionConfig('system').name}`);
    console.log(`Vers√£o: ${config.getSectionConfig('system').version}`);
    console.log(`Ambiente: ${config.getSectionConfig('system').environment}`);
    console.log(`Porta do Servidor: ${config.getSectionConfig('server').port}`);
    console.log(`Timezone: ${config.getSectionConfig('system').timezone}`);
    console.log(`Idioma: ${config.getSectionConfig('system').locale}\n`);

    // Teste das funcionalidades
    console.log('üöÄ === FUNCIONALIDADES HABILITADAS ===');
    const enabledFeatures = config.getEnabledFeatures();
    if (enabledFeatures.length > 0) {
        enabledFeatures.forEach(feature => {
            console.log(`‚úÖ ${feature}`);
        });
    } else {
        console.log('‚ùå Nenhuma funcionalidade habilitada');
    }
    console.log('');

    // Teste das APIs sociais
    console.log('üîó === APIS DE REDES SOCIAIS ===');
    const socialPlatforms = socialConfig.getEnabledPlatforms();
    if (socialPlatforms.length > 0) {
        socialPlatforms.forEach(platform => {
            const platformConfig = socialConfig.getPlatformConfig(platform);
            console.log(`‚úÖ ${platform}: ${platformConfig.baseURL || 'N/A'}`);
        });
    } else {
        console.log('‚ùå Nenhuma API social habilitada');
    }
    console.log('');

    // Teste do ML e Analytics
    console.log('ü§ñ === ML E ANALYTICS ===');
    const mlFeatures = mlConfig.getEnabledFeatures();
    if (mlFeatures.length > 0) {
        mlFeatures.forEach(feature => {
            console.log(`‚úÖ ${feature}`);
        });
    } else {
        console.log('‚ùå Nenhuma funcionalidade de ML habilitada');
    }
    console.log('');

    // Teste do Live Chat
    console.log('üí¨ === LIVE CHAT ===');
    const chatFeatures = chatConfig.getEnabledFeatures();
    if (chatFeatures.length > 0) {
        chatFeatures.forEach(feature => {
            console.log(`‚úÖ ${feature}`);
        });
    } else {
        console.log('‚ùå Nenhuma funcionalidade de chat habilitada');
    }
    console.log('');

    // Valida√ß√£o do sistema
    console.log('üîç === VALIDA√á√ÉO DO SISTEMA ===');
    const systemValidation = config.validateSystemConfig();
    
    if (systemValidation.valid) {
        console.log('‚úÖ Sistema configurado corretamente');
    } else {
        console.log('‚ùå Problemas na configura√ß√£o:');
        systemValidation.recommendations.forEach(rec => {
            console.log(`  - ${rec.message}: ${rec.action}`);
        });
    }
    console.log('');

    // Relat√≥rio de status
    console.log('üìä === RELAT√ìRIO DE STATUS ===');
    const status = config.getStatusReport();
    console.log(`Total de se√ß√µes: ${status.total}`);
    console.log(`Se√ß√µes habilitadas: ${status.enabled}`);
    console.log(`Se√ß√µes desabilitadas: ${status.disabled}`);
    console.log(`Configura√ß√µes v√°lidas: ${status.valid}`);
    console.log(`Configura√ß√µes inv√°lidas: ${status.invalid}`);
    console.log('');

    // Estat√≠sticas de uso
    console.log('üìà === ESTAT√çSTICAS DE USO ===');
    const stats = config.getUsageStats();
    console.log(`Total de se√ß√µes: ${stats.totalSections}`);
    console.log(`Se√ß√µes habilitadas: ${stats.enabledSections}`);
    console.log(`Funcionalidades habilitadas: ${stats.enabledFeatures}`);
    console.log(`Total de funcionalidades: ${stats.totalFeatures}`);
    console.log('');

    // Teste de exporta√ß√£o
    console.log('üì§ === TESTE DE EXPORTA√á√ÉO ===');
    try {
        const exportResult = config.exportConfig('./test-config-export.json', 'json');
        if (exportResult.success) {
            console.log('‚úÖ Configura√ß√£o exportada com sucesso');
            console.log(`üìÅ Arquivo: ${exportResult.message}`);
        } else {
            console.log('‚ùå Erro na exporta√ß√£o:', exportResult.error);
        }
    } catch (error) {
        console.log('‚ùå Erro na exporta√ß√£o:', error.message);
    }
    console.log('');

    // Verifica√ß√£o de arquivos de configura√ß√£o
    console.log('üìÅ === VERIFICA√á√ÉO DE ARQUIVOS ===');
    const configFiles = [
        './config/index.js',
        './config/social-apis.js',
        './config/ml-analytics.js',
        './config/live-chat.js',
        './config/forbidden-words.txt',
        './config/.env.example',
        './config/README.md'
    ];

    configFiles.forEach(file => {
        if (fs.existsSync(file)) {
            console.log(`‚úÖ ${file}`);
        } else {
            console.log(`‚ùå ${file} - N√ÉO ENCONTRADO`);
        }
    });
    console.log('');

    // Verifica√ß√£o de vari√°veis de ambiente cr√≠ticas
    console.log('üîê === VARI√ÅVEIS CR√çTICAS ===');
    const criticalVars = [
        'NODE_ENV',
        'PORT',
        'JWT_SECRET',
        'MONGODB_URI'
    ];

    criticalVars.forEach(varName => {
        if (process.env[varName]) {
            console.log(`‚úÖ ${varName}: ${varName === 'JWT_SECRET' ? '***CONFIGURADO***' : process.env[varName]}`);
        } else {
            console.log(`‚ùå ${varName}: N√ÉO CONFIGURADO`);
        }
    });
    console.log('');

    // Teste de funcionalidades espec√≠ficas
    console.log('üß™ === TESTES ESPEC√çFICOS ===');
    
    // Teste de configura√ß√£o de upload
    const uploadConfig = config.getSectionConfig('upload');
    if (uploadConfig && uploadConfig.enabled) {
        console.log('‚úÖ Upload habilitado');
        console.log(`  - Diret√≥rio: ${uploadConfig.directory}`);
        console.log(`  - Tamanho m√°ximo: ${uploadConfig.maxFileSize} bytes`);
        console.log(`  - M√°ximo de arquivos: ${uploadConfig.maxFiles}`);
    } else {
        console.log('‚ùå Upload n√£o habilitado');
    }

    // Teste de configura√ß√£o de email
    const emailConfig = config.getSectionConfig('email');
    if (emailConfig && emailConfig.enabled) {
        console.log('‚úÖ Email habilitado');
        console.log(`  - Host SMTP: ${emailConfig.smtp.host}`);
        console.log(`  - Porta: ${emailConfig.smtp.port}`);
    } else {
        console.log('‚ùå Email n√£o habilitado');
    }

    // Teste de configura√ß√£o de gamifica√ß√£o
    const gamificationConfig = config.getSectionConfig('gamification');
    if (gamificationConfig && gamificationConfig.enabled) {
        console.log('‚úÖ Gamifica√ß√£o habilitada');
        console.log(`  - Sistema de pontos: ${gamificationConfig.points.enabled ? 'Sim' : 'N√£o'}`);
        console.log(`  - Sistema de badges: ${gamificationConfig.badges.enabled ? 'Sim' : 'N√£o'}`);
    } else {
        console.log('‚ùå Gamifica√ß√£o n√£o habilitada');
    }
    console.log('');

    // Resumo final
    console.log('üéØ === RESUMO FINAL ===');
    if (systemValidation.valid) {
        console.log('üéâ Sistema configurado e funcionando corretamente!');
        console.log(`üöÄ ${enabledFeatures.length} funcionalidades habilitadas`);
        console.log(`üîó ${socialPlatforms.length} APIs sociais configuradas`);
        console.log(`ü§ñ ${mlFeatures.length} recursos de ML habilitados`);
        console.log(`üí¨ ${chatFeatures.length} funcionalidades de chat ativas`);
    } else {
        console.log('‚ö†Ô∏è  Sistema configurado com problemas');
        console.log('üìã Verifique as recomenda√ß√µes acima');
        console.log('üîß Configure as vari√°veis de ambiente necess√°rias');
    }

} catch (error) {
    console.error('‚ùå Erro ao carregar configura√ß√µes:', error.message);
    console.error('üìã Stack trace:', error.stack);
    
    // Verifica se os arquivos de configura√ß√£o existem
    console.log('\nüìÅ Verificando arquivos de configura√ß√£o...');
    const configDir = './config';
    
    if (fs.existsSync(configDir)) {
        const files = fs.readdirSync(configDir);
        console.log('Arquivos encontrados em ./config:');
        files.forEach(file => {
            console.log(`  - ${file}`);
        });
    } else {
        console.log('‚ùå Diret√≥rio ./config n√£o encontrado');
    }
    
    process.exit(1);
}

console.log('\n‚ú® Teste de configura√ß√£o conclu√≠do!');